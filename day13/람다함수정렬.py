#람다함수 정렬
tuple_num = [(1,10),(4,2),(99,6),(5,1),(8,12),(-3,20)]
#tuple_num : 튜플로 이루어진 리스트를 생성함 (각 튜플은 두개의 숫자로 이루어짐)


sorted_tuple = sorted(tuple_num)
#sorted(iterable)는 리스트, 튜플 등 정렬 가능한 데이터를 오름차순 정렬해서 반환합니다.
#sorted함수는 두번째 매개변수가 없으면 튜플의 경우는 첫번재 요소로 정렬
#(1, 10) → 첫 번째 요소는 1 / (4, 2) → 첫 번째 요소는 4 ...

print(sorted_tuple)
#[(-3, 20), (1, 10), (4, 2), (5, 1), (8, 12), (99, 6)]
# -3,1,4,5,8,99 앞자리 오름차순으로 정렬된것임

#람다함수를 사용해서 튜플의 두번째 자리로 정렬하기
sorted_tuple = sorted(tuple_num,key=lambda t:t[1])
# sorted는 원래 첫째자리의 오름차순으로 정렬하는데, 튜플의 두 번째 요소로 설정하기 위해 작성한것.
#정렬 기준을 key 함수의 반환값으로 삼아 오름차순 정렬합니다. (새 리스트를 만들어 반환, 원본은 그대로)

#lambda 매개변수: 리턴값
#sorted(iterable, key=함수) : iterable 안의 원소를 하나씩 꺼내서 그 원소를 key에 지정된 함수에 전달
# 이터러블 안에 원소 : tuple_num의 (1,10), (4,2), (99,6) 같은 튜플들이에요.
# 즉 sorted가 정렬할 때 이터러블에 들어있는 각 튜플을 하나씩 꺼내서 lambda 함수에 집어넣습니다.
#즉, (1,10)이 들어가면 lambda index: index[1]에서 lambda index(1,10) : index[1](10) 이 되는 거예요.
# 그럼 index[1] = 10이 리턴됩니다.

#정렬 직전, key 함수가 각 튜플에 적용돼 키값을 만듭니다:
#(1,10) → 10
# (4,2) → 2
# (99,6) → 6
# (5,1) → 1
# (8,12) → 12
# (-3,20) → 20

print(sorted_tuple)